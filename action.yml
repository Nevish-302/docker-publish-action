name: Openzim Docker Publish Action
description: Build and publish Docker Images to both Docker Hub and ghcr.
author: openzim
branding:
  icon: package
  color: green

inputs:
  image-name:
    description: target image path on both registries (ex. 'openzim/dnscache')
    required: true
  registries:
    description: list of registries to push to (defaults to docker.io ghcr.io)
    required: false
    default: docker.io ghcr.io
  credentials:
    description: list of credentials for each registry. Ex. DOCKERIO_USERNAME=xxx DOCKERIO_TOKEN=yyy GHCRIO_USERNAME=xxx
    required: true
  context:
    description: folder to use as context for the build (ex. '.' or 'dnscache')
    required: false
    default: .
  dockerfile:
    description: Dockerfile path (relative to context) if not 'Dockerfile'
    required: false
    default: Dockerfile
  build-args:
    description: optional key/value pairs to pass as build arguments. {tag} replaced with found version (if any)
    required: false
  platforms:
    description: specify platform to build for (one of linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6, etc)
    required: false
    default: linux/amd64
  on-master:
    description: tag to use on master commits. (ex. 'latest' or 'dev') Leave out if not wanted
    required: false
  tag-pattern:
    description: pattern to trigger image tagging (ex. 'dnscache-v*')
    required: false
  latest-on-tag:
    description: should matched tag (or manual-tag) be tagged as 'latest' also? (true or false)
    required: false
    default: false
  manual-tag:
    description: Specify the tag manually. Overrides on-master and tag-pattern.
    required: false
    default: ''
  restrict-to:
    description: repository path to limit this action to (ex. 'openzim/zimfarm') to prevent forks from triggering it.
    required: false

runs:
  using: composite
  steps:
    - run: echo "received image-name is ${{ inputs.image-name }}"
      shell: bash

    - name: check and store params
      run: python3 $GITHUB_ACTION_PATH/check_inputs.py
      shell: bash
      env:
        IMAGE_NAME: ${{ inputs.image-name }}
        REGISTRIES: ${{ inputs.registries }}
        CREDENTIALS: ${{ inputs.credentials }}
        CONTEXT: ${{ inputs.context }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        BUILD_ARGS: ${{ inputs.build-args }}
        PLATFORMS: ${{ inputs.platforms }}
        ON_MASTER: ${{ inputs.on-master }}
        TAG_PATTERN: ${{ inputs.tag-pattern }}
        LATEST_ON_TAG: ${{ inputs.latest-on-tag }}
        MANUAL_TAG: ${{ inputs.manual-tag }}
        RESTRICT_TO: ${{ inputs.restrict-to }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        DOCKER_BUILDX_VERSION: 0.5.1

    - name: set poulp
      run: echo "POULP=${{ inputs.image-name }}" >> $GITHUB_ENV
      shell: bash

    - run: echo "env image-name is $IMAGE_NAME"
      shell: bash

    - run: echo "env POULP is $POULP"
      shell: bash

    - name: find tag
      run: python3 $GITHUB_ACTION_PATH/find_tag.py
      shell: bash

    - name: Display found tag
      run: python3 $GITHUB_ACTION_PATH/display_tag.py
      shell: bash

    - name: debug env
      run: cat $GITHUB_ENV
      shell: bash

    # - name: docker install
    #   run: python3 $GITHUB_ACTION_PATH/docker_install.py
    #   shell: bash

    # - name: docker login
    #   run: python3 $GITHUB_ACTION_PATH/docker_login.py
    #   shell: bash
    #   env:
    #     CREDENTIALS: ${{ inputs.credentials }}

    # - name: docker build-push
    #   run: python3 $GITHUB_ACTION_PATH/docker_build.py
    #   shell: bash

    # - name: docker logout
    #   run: python3 $GITHUB_ACTION_PATH/docker_logout.py
    #   shell: bash
