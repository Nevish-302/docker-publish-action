name: Openzim Docker Publish Action
description: Build and publish Docker Images to both Docker Hub and ghcr.
author: openzim
branding:
  icon: package
  color: green

inputs:
  image-path:
    description: target image path on both registries (ex. 'openzim/dnscache')
    required: true
  context:
    description: folder to use as context for the build (ex. '.' or 'dnscache')
    required: false
    default: .
  dockerfile:
    description: Dockerfile path (relative to context) if not 'Dockerfile'
    required: false
    default: Dockerfile
  on-master:
    description: tag to use on master commits. (ex. 'latest' or 'dev') Leave out if not wanted
    required: false
  tag-pattern:
    description: pattern to trigger image tagging (ex. 'dnscache-v*')
    required: false
  latest-on-tag:
    description: should matched tag be tagged as 'latest' also? (true or false)
    required: false
    default: false
  restrict-to:
    description: repository path to limit this action to (ex. 'openzim/zimfarm') to prevent forks from triggering it.
    required: false
  hub-username:
    description: Docker Hub username to push image
    required: true
  hub-password:
    description: Docker Hub password to push image
    required: true
  ghcr-username:
    description: GHCR username to push image
    required: true
  ghcr-token:
    description: GHCR token to push image
    required: true
  build-args:
    description: optional key/value pairs to pass as build arguments. {version} replaced with found version/latest (if any)
    required: false

runs:
  using: composite
  steps:
    - run: echo "IMAGE_TAGS=" >> $GITHUB_ENV
      shell: bash

    - name: save build-args to env
      run: |
        import os
        import json
        build_args = dict([item.split("=") if "=" in item else (item, "") for item in os.getenv("BUILD_ARGS", "").split()])
        with open(os.getenv("GITHUB_ENV"), "a") as fh:
          fh.write("BUILD_ARGS={}\n".format(json.dumps(build_args)))
      shell: python
      env:
        BUILD_ARGS: ${{ inputs.build-args }}

    - name: Compute Image Tags
      run: python3 $GITHUB_ACTION_PATH/compute_tags.py
      shell: bash
      env:
        IMAGE_PATH: ${{ inputs.image-path }}
        CONTEXT: ${{ inputs.context }}
        ON_MASTER: ${{ inputs.on-master }}
        TAG_PATTERN: ${{ inputs.tag-pattern }}
        LATEST_ON_TAG: ${{ inputs.latest-on-tag }}
        RESTRICT_TO: ${{ inputs.restrict-to }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    - name: Verify Image tags
      run: |
        import os
        tags = [t for t in os.getenv("IMAGE_TAGS", "").strip().split(",") if t]
        if not tags:
            print("No expected tag to push to.")
        else:
          print("We'll build for and push to:")
          for tag in tags:
            print("- {}".format(tag))
      shell: python

    - name: Build and Push
      run: python3 $GITHUB_ACTION_PATH/build_push.py
      shell: bash
      env:
        CONTEXT: ${{ inputs.context }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        DOCKERHUB_USERNAME: ${{ inputs.hub-username }}
        DOCKERHUB_PASSWORD: ${{ inputs.hub-password }}
        GHCR_USERNAME: ${{ inputs.ghcr-username }}
        GHCR_TOKEN: ${{ inputs.ghcr-token }}
